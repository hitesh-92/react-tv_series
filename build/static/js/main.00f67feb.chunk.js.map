{"version":3,"sources":["assets/loader.gif","components/SeriesList/index.js","components/Loader/index.js","components/Intro/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","Link","to","concat","show","id","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","Loader","style","width","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","res","json","catch","err","console","log","_this$state","this","components_Intro","type","onChange","length","trim","components_Loader","src_components_SeriesList","Component","SingleSeries","_this2","match","params","class","image","medium","original","rating","average","premiered","_embedded","episodes","runtime","generes","externals","imdb","href","Main","Switch","Route","exact","path","component","App","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","BrowserRouter","components_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.00f67feb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.17d6ec19.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst SeriesListItem = ({series}) => (\r\n  <li>\r\n    <Link to={`/series/${series.show.id}`}>\r\n      {series.show.name}\r\n    </Link>\r\n  </li>\r\n);\r\n\r\n\r\nconst SeriesList = (props) => {\r\n  return (\r\n    <div>\r\n      <ul className='series-list'>\r\n      {props.list.map(series => (\r\n        <SeriesListItem series={series} key={series.show.id} />\r\n      ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default SeriesList;\r\n","import React from 'react';\r\nimport loaderSrc  from '../../assets/loader.gif';\r\n\r\nconst Loader = props => (\r\n  <div>\r\n    <img\r\n      style={{width: 75}}\r\n      alt=\"loader icon\"\r\n      src={loaderSrc} />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Intro = (props) => (\r\n  <p className=\"App-intro\">\r\n    {props.message}\r\n  </p>\r\n\r\n);\r\n\r\nexport default Intro;\r\n","import React, {Component} from 'react';\r\nimport 'whatwg-fetch';\r\nimport SeriesList from '../../components/SeriesList';\r\nimport Loader from '../../components/Loader/';\r\nimport Intro from '../../components/Intro';\r\n\r\n\r\nclass Series extends Component {\r\n\r\n  state = {\r\n    series: [],\r\n    seriesName: '',\r\n    isFetching: false\r\n  }\r\n\r\n  onSeriesInputChange = e => {\r\n    this.setState({seriesName: e.target.value, isFetching: true});\r\n\r\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n     .then((res) => {\r\n       return res.json()\r\n     }).then((json) => {\r\n       this.setState({series: json, isFetching: false})\r\n     }).catch((err) => {\r\n       console.log(err);\r\n     });\r\n\r\n    console.log(e);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  render(){\r\n\r\n    const {series, seriesName, isFetching} = this.state;\r\n\r\n    return(\r\n      <div>\r\n\r\n      <Intro message=\"Here you can find all of the loved series\"/>\r\n\r\n      <div>\r\n\r\n        <input\r\n          value={seriesName}\r\n          type=\"text\"\r\n          onChange={this.onSeriesInputChange} />\r\n\r\n      </div>\r\n\r\n      {\r\n        !isFetching && series.length === 0 && seriesName.trim() === ''\r\n        &&\r\n        <p>Please enter series name into input</p>\r\n      }\r\n      {\r\n        !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n        &&\r\n        <p>No tv series has been found with this name</p>\r\n      }\r\n      {\r\n        isFetching && <Loader />\r\n      }\r\n      {\r\n        !isFetching && <SeriesList list={this.state.series} />\r\n      }\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Series;\r\n","import React, { Component } from 'react';\r\nimport Loader from '../../components/Loader';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nclass SingleSeries extends Component {\r\n\r\n  state = {\r\n    show: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { id } = this.props.match.params;\r\n\r\n    fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n     .then((res) => {\r\n       return res.json()\r\n     }).then((json) => {\r\n       this.setState({show: json})\r\n     }).catch((err) => {\r\n       console.log(err);\r\n     });\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    // console.log(this.props);\r\n    const { show } = this.state;\r\n    console.log(show);\r\n\r\n\r\n\r\n    return(\r\n      <div class=\"single-show\">\r\n        {\r\n          show == null && <Loader />\r\n        }\r\n        {\r\n          show !== null &&\r\n          <div>\r\n\r\n            <h2>{show.name}</h2>\r\n\r\n            {\r\n              show.image.medium &&\r\n              <img alt=\"show\" src={show.image.medium} />\r\n            }\r\n            {\r\n              !show.image.medium && show.image.original &&\r\n              <img alt=\"show\" src={show.image.original} />\r\n            }\r\n\r\n            <p>Rating: {show.rating.average || 'N/A'}</p>\r\n\r\n            <p>Premeiered: {show.premiered}</p>\r\n\r\n            <p>Episodes: {show._embedded.episodes.length}</p>\r\n\r\n            <p>\r\n              Episode runtime<span><small>(minutes)</small></span>: {show.runtime || 'N/A'}\r\n            </p>\r\n\r\n\r\n            {\r\n              show.generes && <p>{show.generes + ' '}</p>\r\n            }\r\n\r\n            {\r\n              show.externals.imdb &&\r\n              <a\r\n                href={`http://www.imdb.com/title/${show.externals.imdb}`}\r\n                target=\"_blank\"\r\n                class=\"imdb_link\"\r\n              >\r\n                View IMDb\r\n              </a>\r\n            }\r\n\r\n\r\n            <p>\r\n              <Link class=\"return\" to={'/'}>\r\n                Go Back\r\n              </Link>\r\n            </p>\r\n\r\n\r\n\r\n\r\n          </div>\r\n\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default SingleSeries;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\n\r\nconst Main = props => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Series} />\r\n    <Route path=\"/series/:id\" component={SingleSeries} />\r\n  </Switch>\r\n);\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport Main from '../Main';\n// import logo from './logo.svg'; //react logo in App-logo // <img src={logo} className=\"App-logo\" alt=\"logo\" />\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">TV Series List</h1>\n        </header>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n// const getCurrentDate = () => {\n//   const date = new Date();\n//   return date.toDateString();\n// };\n// const greeting = React.createElement('h1', {}, 'Hello World');\n// const greeting = <h1>Hello World! Current date: {getCurrentDate()}</h1>;\n\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n// ReactDOM.render(greeting, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}