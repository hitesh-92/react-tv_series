{"version":3,"sources":["assets/loader.gif","components/SeriesList/index.js","components/Loader/index.js","components/Intro/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","Link","className","to","concat","show","id","name","SeriesList","props","list","map","SeriesList_SeriesListItem","key","Loader","style","width","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","res","json","catch","err","console","log","_this$state","this","components_Intro","type","onChange","placeholder","autoFocus","length","trim","components_Loader","src_components_SeriesList","Component","ShowSummary","summary","replace","SingleSeries","_this2","match","params","image","medium","rating","average","premiered","status","_embedded","episodes","runtime","generes","externals","imdb","href","rel","officialSite","SingleSeries_ShowSummary","Main","Switch","Route","exact","path","component","App","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","BrowserRouter","components_App","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34e6bb25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.17d6ec19.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst SeriesListItem = ({series}) => (\r\n  <li>\r\n    <Link className=\"series-link\" to={`/series/${series.show.id}`}>\r\n      {series.show.name}\r\n    </Link>\r\n  </li>\r\n);\r\n\r\n\r\nconst SeriesList = (props) => {\r\n  return (\r\n    <div>\r\n      <ul className='series-list'>\r\n      {props.list.map(series => (\r\n        <SeriesListItem series={series} key={series.show.id} />\r\n      ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default SeriesList;\r\n","import React from 'react';\r\nimport loaderSrc  from '../../assets/loader.gif';\r\n\r\nconst Loader = props => (\r\n  <div>\r\n    <img\r\n      style={{width: 75}}\r\n      alt=\"loader icon\"\r\n      src={loaderSrc} />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Intro = (props) => (\r\n  <p className=\"App-intro\">\r\n    {props.message}\r\n  </p>\r\n\r\n);\r\n\r\nexport default Intro;\r\n","import React, {Component} from 'react';\r\nimport 'whatwg-fetch';\r\nimport SeriesList from '../../components/SeriesList';\r\nimport Loader from '../../components/Loader/';\r\nimport Intro from '../../components/Intro';\r\nimport './index.css';\r\n\r\nclass Series extends Component {\r\n\r\n  state = {\r\n    series: [],\r\n    seriesName: '',\r\n    isFetching: false\r\n  }\r\n\r\n  onSeriesInputChange = e => {\r\n    this.setState({seriesName: e.target.value, isFetching: true});\r\n\r\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n     .then((res) => {\r\n       return res.json()\r\n     }).then((json) => {\r\n       this.setState({series: json, isFetching: false})\r\n     }).catch((err) => {\r\n       console.log(err);\r\n     });\r\n\r\n    console.log(e);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  render(){\r\n\r\n    const {series, seriesName, isFetching} = this.state;\r\n\r\n    return(\r\n\r\n      <div className=\"home-body\">\r\n\r\n        <Intro message=\"Here you can find info about every series\"/>\r\n\r\n        <div className=\"search-bar\">\r\n          <input\r\n            value={seriesName}\r\n            type=\"text\"\r\n            onChange={this.onSeriesInputChange}\r\n            placeholder=\"Enter show name\"\r\n            autoFocus\r\n          />\r\n        </div>\r\n\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() === ''\r\n          &&\r\n          <p className=\"search-message\">Please enter series name into input</p>\r\n        }\r\n        {\r\n          !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n          &&\r\n          <p className=\"search-message red\">NOT FOUND!</p>\r\n        }\r\n        {\r\n          isFetching && <Loader />\r\n        }\r\n        {\r\n          !isFetching && <SeriesList list={this.state.series} />\r\n        }\r\n\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Series;\r\n","import React, { Component } from 'react';\r\nimport Loader from '../../components/Loader';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nconst ShowSummary = (props) => (\r\n  <p> {props.summary.replace(/<\\/?(\"[^\"]*\"|'[^']*'|[^>])*(>|$)/g, \"\")} </p>\r\n)\r\n\r\n\r\nclass SingleSeries extends Component {\r\n\r\n  state = {\r\n    show: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { id } = this.props.match.params;\r\n\r\n    fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n     .then((res) => {\r\n       return res.json()\r\n     }).then((json) => {\r\n       this.setState({show: json})\r\n     }).catch((err) => {\r\n       console.log(err);\r\n     });\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    // console.log(this.props);\r\n    const { show } = this.state;\r\n    console.log(show);\r\n\r\n\r\n\r\n    return(\r\n      <div className=\"single-show\">\r\n        { show == null && <Loader /> }\r\n        {\r\n          show !== null &&\r\n          <template className=\"seriesInfo\">\r\n\r\n            <div className=\"show-name\">\r\n              <h2>{show.name}</h2>\r\n            </div>\r\n\r\n\r\n            <div className=\"show-img\">\r\n              {\r\n                show.image !== null && show.image.medium &&\r\n                <img alt=\"show\" src={show.image.medium} />\r\n              }\r\n              {\r\n                show.image == null && <i>NO IMAGE</i>\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"show-details\">\r\n              <p> <span className=\"info\"> Rating: </span> {show.rating.average || 'N/A'}</p>\r\n              <p> <span className=\"info\"> Premeiered: </span> {show.premiered}</p>\r\n              <p> <span className=\"info\"> Status:</span> {show.status} </p>\r\n              <p> <span className=\"info\"> Episodes: </span>  {show._embedded.episodes.length}</p>\r\n              <p><span className=\"info\"> Episode runtime <span><small>(mins)</small></span> </span> : {show.runtime || 'N/A'}</p>\r\n              { show.generes && <p>{show.generes + ' '}</p> }\r\n              \r\n              {\r\n                show.externals.imdb &&\r\n                <a\r\n                  href={`http://www.imdb.com/title/${show.externals.imdb}`}\r\n                  target=\"_blank\"\r\n                  className=\"series-imdb\"\r\n                  rel=\"noopener noreferrer\"\r\n                  id=\"imdb_link\" >\r\n                  View IMDb\r\n                </a>\r\n              }\r\n\r\n              {\r\n                show.officialSite &&\r\n                <a \r\n                  className=\"series-offLink\" \r\n                  href={show.officialSite}>\r\n                  View Official Site\r\n                </a>\r\n              }\r\n\r\n            </div>\r\n\r\n            <div className=\"show-summary\">\r\n              { show.summary && <ShowSummary summary={show.summary} /> }\r\n              { !show.summary && <p>No reference to show description available</p> }\r\n            </div>\r\n\r\n            <div className=\"link\">\r\n             <Link to={'/'}> Go Back </Link>\r\n            </div>\r\n\r\n          </template>\r\n\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default SingleSeries;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\n\r\nconst Main = props => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Series} />\r\n    <Route path=\"/series/:id\" component={SingleSeries} />\r\n  </Switch>\r\n);\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport Main from '../Main';\n// import logo from './logo.svg'; //react logo in App-logo // <img src={logo} className=\"App-logo\" alt=\"logo\" />\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">TV Series Listings</h1>\n        </header>\n        <Main />\n        <footer className=\"App-footer\">\n          <small>\n            All information about all tv series viewed is from http://www.tvmaze.com/\n          </small>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n// const getCurrentDate = () => {\n//   const date = new Date();\n//   return date.toDateString();\n// };\n// const greeting = React.createElement('h1', {}, 'Hello World');\n// const greeting = <h1>Hello World! Current date: {getCurrentDate()}</h1>;\n\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n// ReactDOM.render(greeting, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}